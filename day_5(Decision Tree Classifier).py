# -*- coding: utf-8 -*-
"""DAY-5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OOgQjR-8AbmhYJfghD-Spq__qE3RrAEm
"""

import numpy as np        # For numerical operations and arrays
import pandas as pd         # For data loading, manipulation, and analysis
import matplotlib.pyplot as  plt # for data visualzing
import seaborn as sns        # For advanced data visualization with better styling

data=pd.read_csv("/content/Iris.csv") # read the dataset from csv
data # display the data

data.info() # information about the dataset

x=data.iloc[:,:-1] # assigning input attributes to the X
x # displaying the X

y=data.iloc[:,-1] # assigning the output attribute to the y
y # displaying the y

data.info() # which provides the complete description about that dataset

data.describe() # which describes about that dataset

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3) # split the data into training and testing

x_train # displaying the x train

y_train # displaying the y train

x_test.head() # displaying the x_test

y_test.head() # displaying the y_test

from sklearn.tree import DecisionTreeClassifier

model=DecisionTreeClassifier()

model = DecisionTreeClassifier(max_depth=3)  # or try 2, 4, etc.

model.fit(x_train,y_train) # training the model by giving the x_train and y_train

model.predict(x_test) # testing the model by giving the x_test data

x_test # displaying x_test

y_test # displaying x_test

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report # importing the evaluation metrics of the model

accu=accuracy_score(y_test,model.predict(x_test)) # measuring the accuracy of the model
accu # displaying the accuracy

cm=confusion_matrix(y_test,model.predict(x_test)) # measuring the confusion matrix of the model
print(cm) # displaying the confusion matrix

cr=classification_report(y_test,model.predict(x_test)) # measuring classification report of the model
print(cr) # displaying the classification report

importances = model.feature_importances_ # Getting feature importances from the trained Decision Tree model

features = x.columns # Getting the feature names from the dataset
sns.barplot(x=importances, y=features) # Creating a barplot using Seaborn to visualize feature importances
plt.title("Feature Importances") # giving title to graph
plt.show()

from sklearn import tree # importing tree module for constructing of tree

rep=tree.DecisionTreeClassifier()

rep.fit(x_train,y_train) # giving the training data to the model

print(tree.plot_tree(rep)) # displaying the tree structure for the given dataset(Decision-Tree)

from sklearn.ensemble import RandomForestClassifier  # Importing the Random Forest Classifier

rf=RandomForestClassifier(n_estimators=100) # Creating a Random Forest model with 100 decision trees

rf.fit(x_train,y_train) # Training the Random Forest model on the training data

rf_preds = rf.predict(x_test) # Predicting the output for the test dataset

accuracy_score(y_test, rf_preds) # Printing the accuracy of the Random Forest model

from sklearn.model_selection import cross_val_score  # Import cross-validation function

scores = cross_val_score(model, x, y, cv=5)  # Perform 5-fold cross-validation on the decision tree model
print("Cross-validation scores:", scores)  # Print individual fold scores
print("Mean accuracy:", scores.mean())  # Print the average accuracy across all folds